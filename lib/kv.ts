// Ki·ªÉm tra xem KV ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ch∆∞a
const isKVConfigured =
  process.env.KV_REST_API_URL &&
  process.env.KV_REST_API_URL.startsWith("https://") &&
  process.env.KV_REST_API_TOKEN

// Bi·∫øn l∆∞u tr·ªØ d·ªØ li·ªáu t·∫°m th·ªùi khi kh√¥ng c√≥ KV
let localSensorData: any[] = []
let localLatestData: any = null
let localLastUpdated: string = new Date().toISOString()

// Import KV ch·ªâ khi ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh
let kv: any = null
if (isKVConfigured) {
  try {
    const { kv: kvClient } = require("@vercel/kv")
    kv = kvClient
    console.log("‚úÖ Vercel KV initialized successfully")
  } catch (error) {
    console.error("‚ùå Failed to initialize Vercel KV:", error)
  }
}

export const KV_KEYS = {
  SENSOR_DATA: "sensor_data",
  LATEST_DATA: "latest_data",
  LAST_UPDATED: "last_updated",
}

// Helper l·∫•y d·ªØ li·ªáu c·∫£m bi·∫øn
export async function getSensorData() {
  if (kv) {
    try {
      const data = await kv.get(KV_KEYS.SENSOR_DATA)
      return Array.isArray(data) ? data : []
    } catch (error) {
      console.error("‚ùå Error fetching sensor data from KV:", error)
      return localSensorData
    }
  } else {
    return localSensorData
  }
}

// L·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t
export async function getLatestData() {
  if (kv) {
    try {
      return await kv.get(KV_KEYS.LATEST_DATA)
    } catch (error) {
      console.error("‚ùå Error fetching latest data from KV:", error)
      return localLatestData
    }
  } else {
    return localLatestData
  }
}

// L·∫•y th·ªùi gian c·∫≠p nh·∫≠t cu·ªëi c√πng
export async function getLastUpdated() {
  if (kv) {
    try {
      const timestamp = await kv.get(KV_KEYS.LAST_UPDATED)
      return timestamp ? (timestamp as string) : localLastUpdated
    } catch (error) {
      console.error("‚ùå Error fetching last updated time from KV:", error)
      return localLastUpdated
    }
  } else {
    return localLastUpdated
  }
}

// ‚õîÔ∏è B·∫¢N GHI C≈® V·∫™N B·ªä L∆ØU ‚Üí s·ª≠a ·ªü ƒë√¢y:
export async function saveSensorData(newData: any[]) {
  if (!Array.isArray(newData)) {
    console.warn("‚ö†Ô∏è saveSensorData: d·ªØ li·ªáu kh√¥ng ph·∫£i m·∫£ng")
    return false
  }

  const now = new Date().toISOString()

  let existingData: any[] = []
  if (kv) {
    try {
      const existing = await kv.get(KV_KEYS.SENSOR_DATA)
      existingData = Array.isArray(existing) ? existing : []
    } catch (error) {
      console.error("‚ùå Error reading existing sensor data from KV:", error)
    }
  } else {
    existingData = localSensorData
  }

  // G·ªôp v√† lo·∫°i b·ªè tr√πng timestamp
  const mergedData = [...existingData, ...newData]
    .filter((item) => item.timestamp)
    .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()) // m·ªõi nh·∫•t l√™n ƒë·∫ßu
    .filter((item, index, self) =>
      index === self.findIndex((i) => i.timestamp === item.timestamp)
    )
    .slice(0, 100) // gi·ªØ 100 b·∫£n m·ªõi nh·∫•t

  console.log("üíæ Saving merged sensor data, count:", mergedData.length)

  if (kv) {
    try {
      await kv.set(KV_KEYS.SENSOR_DATA, mergedData)
      return true
    } catch (error) {
      console.error("‚ùå Error saving sensor data to KV:", error)
      localSensorData = mergedData
      return false
    }
  } else {
    localSensorData = mergedData
    return true
  }
}

// L∆∞u latest data n·∫øu timestamp m·ªõi h∆°n
export async function saveLatestData(data: any) {
  const now = new Date().toISOString()
  const incomingTimestamp = data?.timestamp ? new Date(data.timestamp).getTime() : 0

  const current = await getLatestData()
  const currentTimestamp = current?.timestamp ? new Date(current.timestamp).getTime() : 0

  console.log("üïí Incoming latest data timestamp:", data?.timestamp)
  console.log("üïí Current stored latest data timestamp:", current?.timestamp)

  if (incomingTimestamp >= currentTimestamp) {
    if (kv) {
      try {
        await kv.set(KV_KEYS.LATEST_DATA, data)
        await kv.set(KV_KEYS.LAST_UPDATED, now)
        console.log("‚úÖ Saved new latest data")
        return true
      } catch (error) {
        console.error("‚ùå Error saving latest data to KV:", error)
        localLatestData = data
        localLastUpdated = now
        return false
      }
    } else {
      localLatestData = data
      localLastUpdated = now
      console.log("‚úÖ Saved new latest data (local)")
      return true
    }
  } else {
    console.warn("‚ö†Ô∏è Ignored incoming data because it is older than current data")
    return false
  }
}

// Ki·ªÉm tra tr·∫°ng th√°i KV
export function isKVAvailable() {
  return !!kv
}
